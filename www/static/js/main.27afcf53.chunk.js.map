{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","platform","useState","image","setImage","popup","message","title","buttonName","window","navigator","notification","alert","onSaveImageSuccess","onSaveImageError","className","type","onClick","camera","getPicture","success","console","log","error","e","cordova","plugins","imagesaver","saveImageToGallery","src","alt","width","defaultProps","renderReactDOM","device","ReactDOM","render","StrictMode","document","getElementById","addEventListener","app"],"mappings":"yMAuBA,SAASA,EAAT,GAA2B,EAAZC,SAAa,IAC1B,EAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAQ,SAACC,EAASC,EAAOC,GAC7BC,OAAOC,UAAUC,aAAaC,MAC5BN,GACA,cACAC,EACAC,IAeEK,EAAqB,WACzBR,EAAM,uBAAwB,gBAG1BS,EAAmB,WACvBT,EAAM,gCAAiC,oBAkBzC,OACE,sBAAKU,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,wBAAQC,KAAK,SAASC,QAnBV,WAChB,IACER,OAAOC,UAAUQ,OAAOC,YACtB,SAACC,GACCC,QAAQC,IAAIF,GACZhB,EAASgB,MAEX,SAACG,GACCF,QAAQC,IAAIC,KAEd,IAEF,MAAOC,GACPH,QAAQC,IAAI,UAAWE,KAMrB,4BAGCrB,GACC,wBAAQa,KAAK,SAASC,QA1CZ,WAChB,IACER,OAAOgB,QAAQC,QAAQC,WAAWC,mBAChCzB,EACAU,EACAC,GAEF,MAAOU,GACPH,QAAQC,IAAI,UAAWE,KAkCnB,2BAKJ,qBAAKT,UAAU,QAAf,SACGZ,GAAS,qBAAK0B,IAAK1B,EAAO2B,IAAI,UAAUC,MAAM,cASvD/B,EAAIgC,aAAe,CACjB/B,SAAU,OAGGD,QC1FTiC,EAAiB,WACrB,IAAIhC,EACJ,IACEA,EAAWiC,OAAOjC,SAClB,MAAOuB,GACPH,QAAQC,IAAI,IAAKE,GAEnBW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKpC,SAAUA,MAEjBqC,SAASC,eAAe,WAIhB,WAEJ9B,OAAOgB,QACTa,SAASE,iBACP,eACA,WACEP,OAEF,GAGFA,KAKNQ,I","file":"static/js/main.27afcf53.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.scss';\n\nfunction Modal({ display, message, callback }) {\n  useEffect(() => {\n    setTimeout(() => {\n      callback();\n    }, 2500);\n  });\n  return display && <div className=\"modal\">{message}</div>;\n}\n\nModal.propTypes = {\n  display: PropTypes.bool.isRequired,\n  message: PropTypes.string.isRequired,\n  callback: PropTypes.func,\n};\nModal.defaultProps = {\n  callback: () => {},\n};\n\nfunction App({ platform }) {\n  const [image, setImage] = useState();\n  const popup = (message, title, buttonName) => {\n    window.navigator.notification.alert(\n      message,\n      () => {},\n      title,\n      buttonName,\n    );\n  };\n  const saveImage = () => {\n    try {\n      window.cordova.plugins.imagesaver.saveImageToGallery(\n        image,\n        onSaveImageSuccess,\n        onSaveImageError,\n      );\n    } catch (e) {\n      console.log('error: ', e);\n    }\n  };\n\n  const onSaveImageSuccess = () => {\n    popup('Saved to Camera Roll', 'Image Saved');\n  };\n\n  const onSaveImageError = () => {\n    popup('Unable to save to Camera Roll', 'Image Not Saved');\n  };\n  const takePhoto = () => {\n    try {\n      window.navigator.camera.getPicture(\n        (success) => {\n          console.log(success);\n          setImage(success);\n        },\n        (error) => {\n          console.log(error);\n        },\n        {},\n      );\n    } catch (e) {\n      console.log('ERROR: ', e);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <button type=\"button\" onClick={takePhoto}>\n          Take Photo Now\n        </button>\n        {image && (\n          <button type=\"button\" onClick={saveImage}>\n            Save Image\n          </button>\n        )}\n      </div>\n      <div className=\"photo\">\n        {image && <img src={image} alt=\"profile\" width=\"100%\" />}\n      </div>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  platform: PropTypes.string,\n};\nApp.defaultProps = {\n  platform: 'web',\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nconst renderReactDOM = () => {\n  let platform;\n  try {\n    platform = device.platform;\n  } catch (e) {\n    console.log('e', e);\n  }\n  ReactDOM.render(\n    <React.StrictMode>\n      <App platform={platform} />\n    </React.StrictMode>,\n    document.getElementById('root'),\n  );\n};\n\nconst app = {\n  init() {\n    if (window.cordova) {\n      document.addEventListener(\n        'deviceready',\n        () => {\n          renderReactDOM();\n        },\n        false,\n      );\n    } else {\n      renderReactDOM();\n    }\n  },\n};\n\napp.init();\n"],"sourceRoot":""}